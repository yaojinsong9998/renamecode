

# nums = [1,2,3,43,5,6]

# for i in range(0,len(nums)):
#     print("索引:" + str(i) + "," + "值:" + str(nums[i]));

# i = 0
# while i < len(nums):
#     if nums[i] == 3:
#         for j in range(i,len(nums)):
#             print("内层输出:" + str(nums[j]))
#             if nums[j] == 5:
#                 i = j + 1
#                 print("跳出")
#                 break
#     else:
#         print("外层输出:" + str(nums[i]));
#         i += 1

lines = ['package com.dianping.midas.kepler.web.business.abtest.action;\n', '\n', 'import com.alibaba.fastjson.JSONObject;\n', 'import com.dianping.baymax.slot.api.dto.SlotDTO;\n', 'import com.dianping.baymax.slot.api.service.SlotInfoService;\n', 'import com.dianping.midas.kepler.biz.business.abtest.entity.BgBuGroupResult;\n', 'import com.dianping.midas.kepler.biz.business.abtest.enums.AbTestDimEnum;\n', 'import com.dianping.midas.kepler.biz.business.abtest.service.AbTestDimService;\n', 'import com.dianping.midas.kepler.biz.business.abtest.service.AbTestService;\n', 'import com.dianping.midas.kepler.biz.business.abtest.utils.AbTCommonUtils;\n', 'import com.dianping.midas.kepler.biz.utils.ExcelUtils;\n', 'import com.dianping.midas.kepler.web.common.action.AjaxBaseAction;\n', 'import org.apache.commons.collections.CollectionUtils;\n', 'import org.apache.commons.lang.StringUtils;\n', 'import org.springframework.beans.factory.annotation.Autowired;\n', '\n', 'import java.io.InputStream;\n', 'import java.util.*;\n', 'import java.util.stream.Collectors;\n', '\n', '///Users/yaojinsong/IdeaProjects/demo/src/main/java/com/dianping/midas/kepler/web/business/abtest/action\n', 'public class AbTestAction extends AjaxBaseAction {\n', '\n', '    private static final long serialVersionUID = 1L;\n', '    }\n', '    private String startDate;\n', '\n', '    private String endDate;\n', '\n', '    private String startHour;\n', '\n', '    private String endHour;\n', '\n', '    private String mediaId;// 美团APP|点评APP\n', '\n', '    private String slotId;\n', '\n', '    private String cityId;\n', '\n', '    private String expName;     // 实验名称，必须\n', '\n', '    private String compareName; // 对照试验\n', '\n', '    private String queryType;   // 流量类型，必须，search-关键词搜索 | select-筛选搜索\n', '\n', '    private String cat0_id;     // 一级类目\n', '\n', '    private String cat1_id;     // 流量类型为search时不传\n', '\n', '    private String cat1_name;     // 流量类型为search时不传\n', '\n', '    private List<String> gatherId;     // 模块id\n', '\n', '    private List<String> intentTag;     // 关键词意图\n', '\n', '    private List<String> baseExpType;   // 实验组策略标识List，默认 0\n', '\n', '    private List<String> compareExpType; // 对照组策略标识List，默认 1\n', '\n', '    private String selectColumn; // 趋势图选择指标\n', '\n', '    private String selectMetric; // 二期指标\n', '\n', '    private String dataType; // realtime|offline。默认 offline-离线数据，realtime-实时数据。\n', '\n', '    private InputStream excelFile;\n', '    private String fileName;\n', '\n', '    @Autowired\n', '    private AbTestService abTestService;\n', '\n', '    @Autowired\n', '    private AbTestDimService abtDimService;\n', '\n', '    @Autowired\n', '    private SlotInfoService slotInfoService;\n', '\n', '    @Deprecated\n', '    public String queryABTTableData() {\n', '        Map<AbTestDimEnum, List<String>> filterMap = initFilters();\n', '\n', '//        Object res = abTestService.queryABTTableDataByMetrics(startDate, endDate, dataType, baseExpType, compareExpType, filterMap, selectMetric);\n', '\n', '//        this.msg.put("res",res);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '\n', '\n', '    }\n', '\n', '    public String queryABTestBgBuTableData() throws Exception {\n', '        Map<AbTestDimEnum, List<String>> filterMap = initFilters();\n', '        Object res = abTestService.queryABTestBgBuTableData(startDate, endDate, dataType, expName, compareName, baseExpType, compareExpType, filterMap);\n', '        this.msg.put("res", res);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '    }\n', '\n', '    public String downloadABTBgBuTable() throws Exception {\n', '        queryABTestBgBuTableData();\n', '        List<JSONObject> columns = ((JSONObject) msg.get("res")).getJSONArray("titleList").toJavaList(JSONObject.class);\n', '        List<BgBuGroupResult> res = (List) ((JSONObject) msg.get("res")).get("dataList");\n', '        List<JSONObject> flatDataList = new ArrayList<>();\n', '        for (BgBuGroupResult data : res) {\n', '            flatDataList.addAll(data.getGroupRowList());\n', '            List<BgBuGroupResult> childrenList = Optional.ofNullable(data.getChildren()).orElse(Collections.emptyList());\n', '            for (BgBuGroupResult child : childrenList) {\n', '                flatDataList.addAll(child.getGroupRowList());\n', '            }\n', '        }\n', '        excelFile = tableDataToExcel(columns, flatDataList);\n', '        fileName = "CategoryData_" + generateExcelFileName();\n', '        distributeFileUrl = distributeExcelFileByStream(excelFile, fileName);\n', '        this.msg.put("res", distributeFileUrl);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '    }\n', '\n', '    public String downloadABTTableData() {\n', '\n', '        queryABTTableData();\n', '\n', '        List<JSONObject> columns = (List) ((JSONObject) msg.get("res")).get("titleList");\n', '        List<JSONObject> res = (List) ((JSONObject) msg.get("res")).get("dataList");\n', '        excelFile = tableDataToExcel(columns, res);\n', '        fileName = "DataDetail_" + generateExcelFileName();\n', '\n', '        return "excel";\n', '    }\n', '\n', '    @Deprecated\n', '    public String queryABTChartData() {\n', '        Map<AbTestDimEnum, List<String>> filterMap = initFilters();\n', '//        Object res = abTestService.queryABTChartData(startDate, endDate, dataType, selectColumn, baseExpType, compareExpType, filterMap);\n', '\n', '//        this.msg.put("res",res);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '    }\n', '\n', '    public String findSlotByMedia() {\n', '        Object res = abtDimService.findSlotByMedia(mediaId);\n', '\n', '        this.msg.put("res", res);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '    }\n', '\n', '    public String queryGatherId() {\n', '        Object res = abtDimService.queryGatherId();\n', '\n', '        this.msg.put("res", res);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '    }\n', '\n', '    public String queryIntentTag() {\n', '        Object res = abtDimService.queryIntentTag();\n', '        this.msg.put("res", res);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '    }\n', '\n', '    public String findExpNameByMediaAndSlot() {\n', '\n', '        Object res = abtDimService.findExpNameBySlotIds(slotId, mediaId, dataType);\n', '\n', '        this.msg.put("res", res);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '    }\n', '\n', '    public String findQueryTypeByMediaAndSlot() {\n', '\n', '        Object res = abtDimService.findQueryTypeByMediaAndSlot(slotId, mediaId);\n', '\n', '        this.msg.put("res", res);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '    }\n', '\n', '    public String findCat1ByCat0() {\n', '\n', '        Object res = abtDimService.findCat1ByCat0(cat0_id);\n', '\n', '        this.msg.put("res", res);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '    }\n', '\n', '    public String findABTOriginDim() {\n', '        Object res = abtDimService.findABTOriginDim(dataType);\n', '\n', '        this.msg.put("res", res);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '\n', '    }\n', '\n', '    public String findExptypesByExpname() {\n', '        Object res = abtDimService.findExptypesByExpname(expName, dataType);\n', '\n', '        this.msg.put("res", res);\n', '        this.code = SUCCESS_CODE;\n', '        return SUCCESS;\n', '\n', '    }\n', '\n', '    private InputStream tableDataToExcel(List<JSONObject> columns, List<JSONObject> dataList) {\n', '        String[] title_e = new String[columns.size()];\n', '        String[] title_c = new String[columns.size()];\n', '\n', '        for (int i = 0; i < columns.size(); i++) {\n', '            JSONObject object = columns.get(i);\n', '            title_c[i] = object.getString("title").equals("NULL") ? "其他" : object.getString("title");\n', '            title_e[i] = object.getString("key");\n', '        }\n', '\n', '        List<Map<String, Object>> mapDataList = new ArrayList<Map<String, Object>>();\n', '\n', '        for (JSONObject object : dataList) {\n', '            Map<String, Object> map = JSONObject.toJavaObject(object, Map.class);\n', '            mapDataList.add(map);\n', '\n', '            for (String key : map.keySet()) {\n', '                map.put(key, map.get(key));\n', '            }\n', '        }\n', '        return ExcelUtils.constructDataToInputStream(mapDataList, title_e, title_c);\n', '    }\n', '\n', '    private String generateExcelFileName() {\n', '        return this.startDate + "~" + this.endDate + ".xlsx";\n', '    }\n', '\n', '    /**\n', '     * 预处理请求过滤维度参数（不含实验策略）\n', '     *\n', '     * @return\n', '     */\n', '    private Map<AbTestDimEnum, List<String>> initFilters() {\n', '        Map<AbTestDimEnum, List<String>> filterMap = new HashMap<AbTestDimEnum, List<String>>();\n', '\n', '//        if (StringUtils.isNotBlank(expName)) {\n', '//            filterMap.put(AbTestDimEnum.expName, Arrays.asList(expName));\n', '//        }\n', '        if (StringUtils.isNotBlank(queryType)) {\n', '            filterMap.put(AbTestDimEnum.queryType, Arrays.asList(queryType));\n', '        }\n', '//        if (StringUtils.isNotBlank(baseExpType) && StringUtils.isNotBlank(compareExpType)) {\n', '//            filterMap.put(AbTestDimEnum.expType, Arrays.asList(baseExpType.split(","))).addAll(Arrays.asList(compareExpType.split(",")));\n', '//        }\n', '        if (StringUtils.isNotBlank(cityId)) {\n', '            filterMap.put(AbTestDimEnum.cityId, Arrays.asList(cityId.split(",")));\n', '        }\n', '        if (StringUtils.isNotBlank(cat0_id)) {\n', '            filterMap.put(AbTestDimEnum.cat0_id, Arrays.asList(cat0_id.split(",")));\n', '        }\n', '        // 实际传的值是 cat1_name\n', '        if (StringUtils.isNotBlank(cat1_id)) {\n', '            filterMap.put(AbTestDimEnum.cat1_name, Arrays.asList(cat1_id.split(",")));\n', '        }\n', '\n', '        if (StringUtils.isNotBlank(cat1_name)) {\n', '            filterMap.put(AbTestDimEnum.cat1_name, Arrays.asList(cat1_name.split(",")));\n', '        }\n', '\n', '        // 模块id\n', '        if (CollectionUtils.isNotEmpty(gatherId)) {\n', '            List<String> gatherIdList = gatherId.stream().flatMap(gatherIds -> Arrays.stream(gatherIds.split(","))).collect(Collectors.toList());\n', '            filterMap.put(AbTestDimEnum.gather_id, gatherIdList);\n', '        }\n', '\n', '        // 关键词意图\n', '        if (CollectionUtils.isNotEmpty(intentTag)) {\n', '            filterMap.put(AbTestDimEnum.intent_tag, intentTag);\n', '        }\n', '\n', '        if (StringUtils.isNotBlank(slotId)) {\n', '            filterMap.put(AbTestDimEnum.slotId, Arrays.asList(slotId.split(",")));\n', '        } else {\n', '            // 只传了 mediaId 时需转换成slotId\n', '            List<Integer> mediaIdList = AbTCommonUtils.stringArr2IntList(mediaId);\n', '            List<SlotDTO> originSlotList = slotInfoService.getSlotByMediaIds(mediaIdList);\n', '            List<String> slotStrList = new ArrayList<String>();\n', '            for (SlotDTO slotDTO : originSlotList) {\n', '                slotStrList.add(String.valueOf(slotDTO.getSlotId()));\n', '            }\n', '\n', '            if (slotStrList.size() > 0) {\n', '                filterMap.put(AbTestDimEnum.slotId, slotStrList);\n', '            }\n', '        }\n', '\n', '        // hour 转换为list\n', '        int startHourNum = Integer.parseInt(startHour);\n', '        int endHourNum = Integer.parseInt(endHour);\n', '        List<String> hours = new ArrayList<String>();\n', '        for (int hour = startHourNum; hour <= endHourNum; hour++) {\n', '            hours.add(String.valueOf(hour));\n', '        }\n', '        filterMap.put(AbTestDimEnum.hour, hours);\n', '\n', '        return filterMap;\n', '    }\n', '\n', '    public String getStartDate() {\n', '        return startDate;\n', '    }\n', '\n', '    public void setStartDate(String startDate) {\n', '        this.startDate = startDate;\n', '    }\n', '\n', '    public String getEndDate() {\n', '        return endDate;\n', '    }\n', '\n', '    public void setEndDate(String endDate) {\n', '        this.endDate = endDate;\n', '    }\n', '\n', '    public String getMediaId() {\n', '        return mediaId;\n', '    }\n', '\n', '    public void setMediaId(String platformId) {\n', '        this.mediaId = platformId;\n', '    }\n', '\n', '    public String getSlotId() {\n', '        return slotId;\n', '    }\n', '\n', '    public void setSlotId(String slotId) {\n', '        this.slotId = slotId;\n', '    }\n', '\n', '    public String getCityId() {\n', '        return cityId;\n', '    }\n', '\n', '    public void setCityId(String cityId) {\n', '        this.cityId = cityId;\n', '    }\n', '\n', '    public String getCat0_id() {\n', '        return cat0_id;\n', '    }\n', '\n', '    public void setCat0_id(String cat0_id) {\n', '        this.cat0_id = cat0_id;\n', '    }\n', '\n', '    public String getCat1_id() {\n', '        return cat1_id;\n', '    }\n', '\n', '    public void setCat1_id(String cat1_id) {\n', '        this.cat1_id = cat1_id;\n', '    }\n', '\n', '    public String getCat1_name() {\n', '        return cat1_name;\n', '    }\n', '\n', '    public void setCat1_name(String cat1_name) {\n', '        this.cat1_name = cat1_name;\n', '    }\n', '\n', '    public String getStartHour() {\n', '        return startHour;\n', '    }\n', '\n', '    public void setStartHour(String startHour) {\n', '        this.startHour = startHour;\n', '    }\n', '\n', '    public String getEndHour() {\n', '        return endHour;\n', '    }\n', '\n', '    public void setEndHour(String endHour) {\n', '        this.endHour = endHour;\n', '    }\n', '\n', '    public String getExpName() {\n', '        return expName;\n', '    }\n', '\n', '    public void setExpName(String expName) {\n', '        this.expName = expName;\n', '    }\n', '\n', '    public String getQueryType() {\n', '        return queryType;\n', '    }\n', '\n', '    public void setQueryType(String queryType) {\n', '        this.queryType = queryType;\n', '    }\n', '\n', '    public String getSelectColumn() {\n', '        return selectColumn;\n', '    }\n', '\n', '    public void setSelectColumn(String selectColumn) {\n', '        this.selectColumn = selectColumn;\n', '    }\n', '\n', '    public String getSelectMetric() {\n', '        return selectMetric;\n', '    }\n', '\n', '    public void setSelectMetric(String selectMetric) {\n', '        this.selectMetric = selectMetric;\n', '    }\n', '\n', '    public String getDataType() {\n', '        return dataType;\n', '    }\n', '\n', '    public void setDataType(String dataType) {\n', '        this.dataType = dataType;\n', '    }\n', '\n', '\n', '    public InputStream getExcelFile() {\n', '        return excelFile;\n', '    }\n', '\n', '    public void setExcelFile(InputStream excelFile) {\n', '        this.excelFile = excelFile;\n', '    }\n', '\n', '    public String getFileName() {\n', '        return fileName;\n', '    }\n', '\n', '    public void setFileName(String fileName) {\n', '        this.fileName = fileName;\n', '    }\n', '\n', '    @Override\n', '    protected void ajaxExecute() {\n', '    }\n', '\n', '    @Override\n', '    public int getCode() {\n', '        return this.code;\n', '    }\n', '\n', '    @Override\n', '    public Map<String, Object> getMsg() {\n', '        return this.msg;\n', '    }\n', '\n', '    public List<String> getGatherId() {\n', '        return gatherId;\n', '    }\n', '\n', '    public void setGatherId(List<String> gatherId) {\n', '        this.gatherId = gatherId;\n', '    }\n', '\n', '    public List<String> getIntentTag() {\n', '        return intentTag;\n', '    }\n', '\n', '    public void setIntentTag(List<String> intentTag) {\n', '        this.intentTag = intentTag;\n', '    }\n', '\n', '    public String getCompareName() {\n', '        return compareName;\n', '    }\n', '\n', '    public void setCompareName(String compareName) {\n', '        this.compareName = compareName;\n', '    }\n', '\n', '    public void setBaseExpType(List<String> baseExpType) {\n', '        this.baseExpType = baseExpType;\n', '    }\n', '\n', '    public void setCompareExpType(List<String> compareExpType) {\n', '        this.compareExpType = compareExpType;\n', '    }\n', '\n', '}\n']

#用于确定函数的边界
def findEnd(lines):
    i = 0
    res = 0
    while i < len(lines):
        line = lines[i]
        line = line.strip()  # 去掉首位空格
        liebiao = line.split()  # 根据空格分割
        if "static" in liebiao and "final" in liebiao:
            print("遇到" + line)
            j = i
            print("其起始行号为:" + str(j + 1))
            while j < len(lines):
                linej = lines[j]
                if ("    }" + '\n') == linej:
                    print("其终止行号为:" + str(j + 1))
                    res = j + 1
                    i = j + 1
                    break
                else:
                    j = j + 1
        else:
            i = i + 1
    return res

res = findEnd(lines)
print(res)